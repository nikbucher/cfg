[core]
	autocrlf = input
	editor = /usr/bin/vim
#	pager=less -R
	pager=more -R || (more && exit 1)
#	pager=cat

[user]
	name = Niklaus Bucher
	email = niklaus@bucher.io

[includeIf "gitdir:~/work/"]
	path = ~/work/.gitconfig

[push]
	default = current
[pull]
	default = current
[branch]
	autosetuprebase = always

[merge "ours"]
	driver = true

[color]
	branch = auto
	diff = auto
	status = auto

[color "branch"]
	current = red #reverse
	local = blue
	remote = green

[color "diff"]
	meta = yellow
	frag = magenta
	old = red bold
	new = green
	plain = white

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[alias]
	# basic
	st = status -s
	cl = clone
	ci = commit
	co = checkout
	br = branch 
	r = reset
	cp = cherry-pick
	gr = grep -Ii

	# log commands
	ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [a:%an]\\ [c:%cn]" --decorate --date=relative
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [a:%an]\\ [c:%cn]" --decorate --numstat
	lc  = "!f() { git ll "$1"^.."$1"; }; f"
	lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
	fl = log -u
	filelog = log -u

	spull = !([[ -z $(git status --porcelain -uno) ]] && git pull --rebase) || (git stash && git pull --rebase && git stash pop)

	xlog = log --graph --decorate --oneline
	xlogext = log --graph --decorate --all --format=format:'%C(yellow)%h%C(reset) %C(bold red)%d%C(reset) %C(green)(%aD)%C(reset) %C(dim green)(%cr)%C(reset) %C(blue)a:%an - c:%cn%C(reset) %n		 %C(dim white)%s%C(reset)'
	xgrep = "!f() { git grep $1 `git ls-remote | grep -Po '(?<=refs/heads/).*' | xargs -I{} echo origin/{}` -- $2; }; f"
	xdiff = "!f() { git diff $1^..$1; }; f"
	foreach = "!f() { find . -maxdepth 2 -name '.git' | xargs -i{} /bin/bash -c \"echo -e '\\e[1m>>> repo {}\\e[0m'; git --git-dir={} --work-tree={}/.. $@\"; }; f"
	fe = "!f() { args=\"$@\"; find . -maxdepth 2 -name '.git' | xargs -i{} /bin/bash -c \"cd {}/..; printf '===> '; pwd; git $args;\"; }; f"
	sync = "!f() { while(true); do git pull --rebase -q; git push -q; sleep 1; done; }; f"

	#quick look at all repo
	loggsa = log --color --date-order --graph --oneline --decorate --simplify-by-decoration --all
	#quick look at active branch (or refs pointed)
	loggs  = log --color --date-order --graph --oneline --decorate --simplify-by-decoration
	#extend look at all repo
	logga  = log --color --date-order --graph --oneline --decorate --all
	#extend look at active branch
	logg   = log --color --date-order --graph --oneline --decorate
	#Look with date
	logda  = log --color --date-order --date=local --graph --format=\"%C(auto)%h%Creset %C(blue bold)%ad%Creset %C(auto)%d%Creset %s\" --all
	logd   = log --color --date-order --date=local --graph --format=\"%C(auto)%h%Creset %C(blue bold)%ad%Creset %C(auto)%d%Creset %s\"		
	#Look with relative date
	logdra = log --color --date-order --graph --format=\"%C(auto)%h%Creset %C(blue bold)%ar%Creset %C(auto)%d%Creset %s\" --all
	logdr = log --color --date-order --graph --format=\"%C(auto)%h%Creset %C(blue bold)%ar%Creset %C(auto)%d%Creset %s\"  
	
	# list all aliases
	list-aliases = "!git config -l | grep alias | cut -c 7-"


# dod n√∂d
#xgrep2 = "!sh -c git grep $1 `git ls-remote | grep -Po '(?<=refs/heads/).*' | xargs -i{} echo origin/{}` $2"

#log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --abbrev-commit --date=relative --branches

#	lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
#	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''		  %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
#	lg = !"git lg1"	
